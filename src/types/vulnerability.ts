import * as vscode from 'vscode';

export interface Vulnerability {    
    name: string,
    severity: {
        value: string,
        sourceName: string
    },
    cvssScore: {
        value: {
            version: string,
            score: number,
            vector: string
        },
        sourceName: string
    },
    disclosureDate: string,
    solutionDate?: string,
    exploitable: boolean,
    fixedInVersion?: string,
    publishDateByVendor: {[key: string]: string},
}

export function vulnToMarkdownString(vuln: Vulnerability): vscode.MarkdownString {
    const md = new vscode.MarkdownString();
    md.appendMarkdown(`**Name**: ${vuln.name}\n\n`);
    md.appendMarkdown(`**Severity**: ${vuln.severity.value}\n\n`);
    md.appendMarkdown(`**CVSS Score**: ${vuln.cvssScore.value.score}\n\n`);
    md.appendMarkdown(`**Disclosure Date**: ${vuln.disclosureDate}\n\n`);
    md.appendMarkdown(`**Exploitable**: ${vuln.exploitable}\n\n`);
    md.appendMarkdown(`**Fixed In Version**: ${vuln.fixedInVersion}\n\n`);
    return md;
}

export function doesVulnPassFilter(vuln: Vulnerability, filters: Set<string>): boolean {
    if (filters.size === 0) {
        return true;
    }

    if (filters.has('Exploitable') && !vuln.exploitable) {
        return false;
    }

    if (filters.has('Fix Available') && !vuln.fixedInVersion) {
        return false;
    }

    return true;
}

export function vulnToColor(severity: string): string {
    let color: string;
    switch (severity) {
        case "Critical":
            color = "charts.purple";
            break;
        case "High":
            color = "charts.red";
            break;
        case "Medium":
            color = "charts.orange";
            break;
        case "Low":
            color = "charts.yellow";
            break;
        default:
            color = "charts.foreground";
            break;
    }
    return color;
}

export function sortVulnerabilities(vulnerabilities: Vulnerability[] | undefined): Vulnerability[] | undefined {
    const severityOrder: { [key: string]: number } = { 'Critical': 1, 'High': 2, 'Medium': 3, 'Low': 4, 'Negligible': 5 };
    return vulnerabilities?.sort((a, b) => severityOrder[a.severity.value] - severityOrder[b.severity.value]) || [];
}